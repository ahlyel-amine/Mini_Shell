t_arguments	*merge_arguments(t_arguments *arguments)
{
	t_arguments	*head;
	t_arguments	*tmp;

	head = arguments;
	while (head->next)
	{
		if (head->type == head->next->type)
		{
			tmp = head->next;
			head->str = ft_strjoin_free(head->str, head->next->str);
			head->next = (head->next)->next;
			free (tmp);
		}
		else
			head = head->next;
	}
	head = arguments;
	while (head)
	{
		printf("[%d][%s]\n", head->type, head->str);
		head = head->next;
	}
	return (arguments);
}

t_arguments	*get_argument(char *line, int *j, int i, int is_word)
{
	t_arguments	*arguments;
	
	arguments = NULL;
	if (is_word)
		arguments = get_arguments(line, j, is_word);
	else
		arguments = get_arguments(line, &i, is_word);
	arguments = merge_arguments(arguments);
	return (arguments);
}

t_arguments	*arguments_constructor(t_arguments *arguments, char *str, unsigned short type)
{
	t_arguments	*new;
	t_arguments	*tmp;
	int	i;

	i = 0;
	new = malloc(sizeof(t_arguments));
	if (!new)
		return (NULL);
	while (str[i])
	{
		if (str[i] == '*')
		{
			i = -1;
			break ;
		}
		i++;
	}
	if (type == 3 && i != -1)
		type = 1;
	new->str = str;
	new->type = type;
	new->next = NULL;
	if (!arguments)
		return (new);
	tmp = arguments;
	while (tmp->next)
		tmp = tmp->next;
	tmp->next = new;
	return (arguments);
}